# As much as I would like to move the luminol package into the crates folder, trunk won't let me :(
# It wants a root package, and it has to be this
[package]
name = "luminol"
description = "Luminol is a FOSS recreation of RPG Maker XP in Rust with love ❤️"
build = "build.rs"

version.workspace = true
authors.workspace = true
edition.workspace = true
license.workspace = true
rust-version.workspace = true
readme.workspace = true
repository.workspace = true
keywords.workspace = true
categories.workspace = true

# Setup various shared workspace values
[workspace]
members = ["crates/*"]
resolver = "2"

[workspace.package]
version = "0.4.0"
authors = [
    "Lily Lyons <lily@nowaffles.com>",
    "Egor Poleshko <somedevfox@gmail.com>",
]
edition = "2021"
rust-version = "1.74"
license = "GPL-3.0"
readme = "README.md"
repository = "https://github.com/Speak2Erase/Luminol"
keywords = ["gamedev", "rpg", "rpg-maker"]
categories = ["games"]

# Shared dependencies
[workspace.dependencies]
egui = "0.23.0"
egui_extras = { version = "0.23.0", features = ["svg", "image"] }
epaint = "0.23.0"

eframe = { version = "0.23.0", path = "crates/eframe/", features = [
    "wgpu",
    "accesskit",
    "persistence",
    "default_fonts",
    "x11",
    "wayland",
], default-features = false }
egui-wgpu = { version = "0.23.0", path = "crates/egui-wgpu/" }
egui_glow = "0.23.0"
egui-winit = "0.23.0"

wgpu = { version = "0.18.0", features = ["naga"] }
glam = { version = "0.24.2", features = ["bytemuck"] }
image = "0.24.7"

serde = { version = "1.0", features = ["derive"] }
alox-48 = { version = "0.4.1", default-features = false }
ron = "0.8.1"
serde_json = "1.0"
rust-ini = "0.20.0"

bytemuck = { version = "1.14.0", features = [
    "extern_crate_alloc",
    "derive",
    "min_const_generics",
] }

tracing = "0.1.37"

strum = { version = "0.25.0", features = ["derive"] }
paste = "1.0.14"
thiserror = "1.0"
bitflags = "2.4.0"
anyhow = "1.0"

parking_lot = { version = "0.12.1", features = ["deadlock_detection"] }
once_cell = "1.18.0"
crossbeam = "0.8.2"
dashmap = "5.5.3"
flume = "0.11.0"
oneshot = "0.1.6"

poll-promise = { version = "0.3.0" }

camino = "1.1.6"

slab = { version = "0.4.9", features = ["serde"] }

itertools = "0.11.0"

rfd = "0.12.0"

rand = "0.8.5"
getrandom = { version = "0.2", features = ["js"] }

luminol-audio = { version = "0.4.0", path = "crates/audio/" }
luminol-app = { version = "0.4.0", path = "crates/app/" }
luminol-components = { version = "0.4.0", path = "crates/components/" }
luminol-config = { version = "0.4.0", path = "crates/config/" }
luminol-core = { version = "0.4.0", path = "crates/core/" }
luminol-data = { version = "0.4.0", path = "crates/data/" }
luminol-filesystem = { version = "0.4.0", path = "crates/filesystem/" }
luminol-graphics = { version = "0.4.0", path = "crates/graphics/" }
luminol-macros = { version = "0.4.0", path = "crates/macros/" }
luminol-modals = { version = "0.4.0", path = "crates/modals/" }
luminol-term = { version = "0.4.0", path = "crates/term/" }
luminol-ui = { version = "0.4.0", path = "crates/ui/" }

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
eframe.workspace = true
egui.workspace = true
egui_extras.workspace = true
epaint.workspace = true

rfd.workspace = true

parking_lot.workspace = true
once_cell.workspace = true

image.workspace = true

crc = { version = "3.0.1", optional = true }

tracing-subscriber = "0.3.17"
color-backtrace = "0.6.0"

luminol-app.workspace = true
luminol-audio.workspace = true
luminol-core.workspace = true
luminol-config.workspace = true
luminol-data.workspace = true
luminol-filesystem.workspace = true
luminol-graphics.workspace = true
luminol-ui.workspace = true
# luminol-windows = { version = "0.1.0", path = "../windows/" }
# luminol-tabs = { version = "0.1.0", path = "../tabs/" }

poll-promise.workspace = true

camino.workspace = true

strum.workspace = true

# Native
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
steamworks = { version = "0.10.0", optional = true }
tokio = { version = "1.33", features = [
    "sync",
    "macros",
    "io-util",
    "rt-multi-thread",
    "time",
] } # *sigh*
luminol-term.workspace = true

# Set poll promise features here based on the target
# I'd much rather do it in the workspace, but cargo doesn't support that yet
#
# Doing this also relies on a quirk of features, that any crate specifying features applies to ALL crates
[target.'cfg(not(target_arch = "wasm32"))'.dependencies.poll-promise]
workspace = true
features = ["tokio"]

[target.'cfg(target_arch = "wasm32")'.dependencies.poll-promise]
workspace = true
features = ["web"]

# Web
# Look into somehow pinning these as workspace dependencies
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = "0.2.87"
wasm-bindgen-futures = "0.4"
js-sys = "0.3"

flume.workspace = true

luminol-web = { version = "0.4.0", path = "crates/web/" }

tracing-wasm = "0.2"
tracing-log = "0.1.3"
tracing.workspace = true

web-sys = { version = "0.3", features = ["Window"] }

# Enable wgpu's `webgl` feature if Luminol's `webgl` feature is enabled,
# enabling its WebGL backend and disabling its WebGPU backend
[target.'cfg(target_arch = "wasm32")'.dependencies.wgpu]
workspace = true
optional = true
features = ["webgl"]

[features]
steamworks = ["dep:steamworks", "crc"]
webgl = ["dep:wgpu"]

[target.'cfg(windows)'.build-dependencies]
winres = "0.1"

[package.metadata.winres]
OriginalFilename = "Luminol.exe"
ProductName = "Luminol"

# Fast and performant.
[profile.release]
opt-level = 3
# lto = "fat"
# debug = true

# Enable only a small amount of optimization in debug mode
[profile.dev]
opt-level = 1

# Enable max optimizations for certain dependencies, but not for our code
# These dependencies are "hot" in that they are used quite frequently

# Ui
[profile.dev.package.egui]
opt-level = 3

[profile.dev.package.eframe]
opt-level = 3

# Audio
[profile.dev.package.rodio]
opt-level = 3

[profile.dev.package.rustysynth]
opt-level = 3

# Graphics
[profile.dev.package.wgpu]
opt-level = 3

[profile.dev.package.image]
opt-level = 3

[profile.dev.package.glam]
opt-level = 3

# See why config is set up this way.
# https://bevy-cheatbook.github.io/pitfalls/performance.html#why-not-use---release

[patch.crates-io]
# We need this for rodio to work in WebAssembly until
# https://github.com/RustAudio/cpal/pull/774
# is merged.
cpal = { git = "https://github.com/DouglasDwyer/cpal.git", rev = "91aeb4d6b02c25791f636fdf92a73637597c077a" }

# If you want to use the bleeding edge version of egui and eframe:
# egui = { git = "https://github.com/emilk/egui", branch = "master" }
# eframe = { git = "https://github.com/emilk/egui", branch = "master" }

# If you fork https://github.com/emilk/egui you can test with:
# egui = { path = "../egui/crates/egui" }
# eframe = { path = "../egui/crates/eframe" }

[package]
name = "luminol-core"

description = "The core crate of Luminol, which all of Luminol's UI is built on top of"

version.workspace = true
authors.workspace = true
edition.workspace = true
license.workspace = true
rust-version.workspace = true
readme.workspace = true
repository.workspace = true
keywords.workspace = true
categories.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lints]
workspace = true

[dependencies]
# * Window management, graphical user interface and 3D rendering * #
egui.workspace = true
egui_dock.workspace = true
egui-notify.workspace = true
egui-modal.workspace = true

# * Data processing * #
serde.workspace = true
serde_path_to_error = "0.1.0" # Path to the element that failed to deserialise
alox-48.workspace = true
serde_json.workspace = true
ron.workspace = true

# * Logging and diagnostics * #
tracing.workspace = true
color-eyre.workspace = true

# * Useful procedural macros * #
strum.workspace = true

# * More efficient implementations of individual components of Rust's Standard Library * #
once_cell.workspace = true

# * Tools to aid concurrent programming * #
poll-promise.workspace = true

# * File system interfaces * #
camino.workspace = true

# * Luminol's crates * #
luminol-audio.workspace = true
luminol-config.workspace = true
luminol-data.workspace = true
luminol-filesystem.workspace = true
luminol-graphics.workspace = true

# * Misc. * #
itertools.workspace = true
rand.workspace = true

# Set poll promise features here based on the target
# I'd much rather do it in the workspace, but cargo doesn't support that yet
#
# Doing this also relies on a quirk of features, that any crate specifying features applies to ALL crates
[target.'cfg(not(target_arch = "wasm32"))'.dependencies.poll-promise]
workspace = true
features = ["tokio"]

[target.'cfg(target_arch = "wasm32")'.dependencies.poll-promise]
workspace = true
features = ["web"]
